@using System.ComponentModel
@using GUI.Coordinators
@using ClassLibrary.Entities
@using MudBlazor.Extensions

<MudTextField T="string" @bind-Value="_story.Title" Variant="Variant.Outlined" Label="Title of your story" Class="mb-4"/>

<MudContainer Class="pa-0">
    @foreach (TextComponent component in _story.Components)
    {
        <MudContainer Class="pa-0 d-flex flex-row flex-grow-1">
            <MudContainer Class="pa-0 d-flex flex-column justify-content-center" Style="width: fit-content">
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowUpward" Disabled="@IsFirstItem(component)" OnClick="() => MoveItemUp(component)" Color="Color.Primary"/>
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ArrowDownward" Disabled="@IsLastItem(component)" OnClick="() => MoveItemDown(component)" Color="Color.Primary"/>
            </MudContainer>
            <MudContainer Class="pa-0 d-flex flex-grow-1 align-content-center">
                @if (component.GetType() == typeof(TextField))
                {
                    <MudTextField @bind-Value="component.As<TextField>()!.Content" Variant="Variant.Filled" AutoGrow ShrinkLabel Label="Write your story here"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Delete" OnAdornmentClick="() => OnDeleteTextField(component)"/>
                }
                else if (component.GetType() == typeof(TextOption))
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => OnOptionButtonClicked(component)">
                        Option
                    </MudButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => OnDeleteTextField(component)">Remove</MudIconButton>
                }
                
            </MudContainer>
        </MudContainer>
        <br/>
    }
</MudContainer>

<MudDivider Style="height: 2px" Class="ma-4"/>

<MudContainer>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => OnAddBtnClick(new TextField())">Add Text</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => OnAddBtnClick(new TextOption())">Add Option</MudButton>
</MudContainer>

@code {
    [Inject]
    private StoryEditCoordinator? StoryEditCoordinator { get; set; }

    private Story _story = new();

    private bool IsFirstItem(TextComponent item) => _story.Components.IndexOf(item) == 0;
    private bool IsLastItem(TextComponent item) => _story.Components.IndexOf(item) == _story.Components.Count - 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (StoryEditCoordinator != null)
        {
            _story = StoryEditCoordinator.CurrentStory;
        }
    }

    private void OnAddBtnClick(TextComponent newComponent)
    {
        _story.Components.Add(newComponent);
    }

    private void OnDeleteTextField(TextComponent id)
    {
        _story.Components.Remove(id);
    }

    private void OnOptionButtonClicked(TextComponent component)
    {
        if (StoryEditCoordinator != null) StoryEditCoordinator.SelectedOption = component.Guid;
    }

    private void MoveItemUp(TextComponent item)
    {
        var index = _story.Components.IndexOf(item);
        if (index > 0)
        {
            (_story.Components[index - 1], _story.Components[index]) = (_story.Components[index], _story.Components[index - 1]);
        }
    }

    private void MoveItemDown(TextComponent item)
    {
        var index = _story.Components.IndexOf(item);
        if (index < _story.Components.Count - 1)
        {
            (_story.Components[index + 1], _story.Components[index]) = (_story.Components[index], _story.Components[index + 1]);
        }
    }
}